{
    "patches": [
        {
            "label": "2025-10-01_19-50-59",
            "content": "class Towel:\n    def __init__(self, color: str, size: str):  # construtor\n        self.color: str = color  # atributos\n        self.size: str = size\n        self.wetness: int = 0\n\n    def dry(self, amount: int) -> None:\n        self.wetness += amount\n        if self.wetness >= self.isMaxWetness():\n            self.wetness = self.isMaxWetness()\n            print(\"toalha encharcada\")\n\n    def isDry(self):\n        return self.wetness == 0\n\n    def wringOut(self):\n        self.wetness = 0\n\n    def isMaxWetness(self) -> int:\n        if self.size == \"P\":  # early return\n            return 10\n        if self.size == \"M\":\n            return 20\n        if self.size == \"G\":\n            return 30\n        return 0  # default return\n\n    def show(self) -> None:\n        print(f\"{self.color} {self.size} {self.wetness}\")\n\n    def __str__(self) -> str:  # toString\n        return f\"Cor: {self.color}, Tamanho: {self.size}, Umidade: {self.wetness}\"\n\n\ndef main():\n    towel: Towel = Towel(\"\", \"\")  # 2: criar um obj com qq valor inicial\n    while True:  # 3: loop infinito\n\n        line: str = input()  # 4: perguntar ao usuario\n        print(\"$\" + line)  # echo\n        args: list[str] = line.split(\" \")  # 5: separar argumentos\n\n        if args[0] == \"end\":\n            break\n        elif args[0] == \"criar\":  # color size\n            color: str = args[1]\n            size: str = args[2]\n            towel = Towel(color, size)\n        elif args[0] == \"seca\":\n            print(\"sim\" if towel.isDry() else \"nao\")\n        elif args[0] == \"torcer\":\n            towel.wringOut()\n        elif args[0] == \"enxugar\":\n            amount: int = int(args[1])\n            towel.dry(amount)\n        elif args[0] == \"mostrar\":\n            print(towel)\n        else:  # 7: erro\n            print(\"fail: comando n\u00e3o encontrado\")\n\n\nif __name__ == \"__main__\":\n    main()\n",
            "lines": "63"
        }
    ]
}