{
    "patches": [
        {
            "label": "2025-09-18_17-23-43",
            "content": "@@ -1,134 +1,22 @@\n-class Towel:%0A    def __init__(self):%0A        self.color: str = %22%22%0A        self.size: str = %22%22%0A        self.wetness: int = 0%0A%0A%0A        \n+print(%22Hello, World!%22)\n",
            "lines": "1"
        },
        {
            "label": "2025-09-18_19-11-17",
            "content": "@@ -9,16 +9,8 @@\n wel:\n- #classe\n %0A   \n@@ -31,31 +31,8 @@\n self\n-, color: str, size: str\n ):%0A \n@@ -56,21 +56,18 @@\n : str = \n-color\n+%22%22\n %0A       \n@@ -84,20 +84,18 @@\n : str = \n-size\n+%22%22\n %0A       \n@@ -123,75 +123,8 @@\n 0%0A%0A%0A\n-#refer%C3%AAncias%0Atowel: Towel = Towel(%22blue%22, %22P%22)%0Aprint(towel.color)%0A%0A\n     \n",
            "lines": "8"
        },
        {
            "label": "2025-09-18_19-45-56",
            "content": "@@ -172,159 +172,59 @@\n ias%0A\n-print(%22QUal a cor da sua toalha?%22)%0Acolor = input()%0Atowel: Towel = Towel(color, %22P%22) #objeto%0Aprint(f%22Sua toalha %C3%A9 %7Btowel.color%7D e tamanho %7Btowel.size%7D.%22\n+towel: Towel = Towel(%22blue%22, %22P%22)%0Aprint(towel.color\n )%0A%0A \n",
            "lines": "12"
        },
        {
            "label": "2025-09-18_19-49-53",
            "content": "@@ -176,17 +176,17 @@\n print(%22Q\n-u\n+U\n al a cor\n@@ -294,16 +294,39 @@\n l.color%7D\n+ e tamanho %7Btowel.size%7D\n .%22)%0A%0A   \n",
            "lines": "14"
        },
        {
            "label": "2025-09-18_19-50-42",
            "content": "@@ -6,19 +6,17 @@\n  Towel: \n- # \n+#\n classe%0A \n@@ -158,1083 +158,157 @@\n  0%0A%0A\n-    def dry(self, amount: int) -%3E None:%0A        self.wetness += amount%0A        if self.wetness %3E self.getMaxWetness():%0A            self.wetness = self.getMaxWetness()%0A%0A    def wringOut(self) -%3E None:%0A        self.wetness = 0%0A%0A    def getMaxWetness(self) -%3E int:%0A        if self.size == %22P%22:%0A            return 10%0A        if self.size == %22M%22:%0A            return 20%0A        if self.size == %22G%22:%0A            return 30%0A        return 0%0A%0A    def isDry(self) -%3E bool:%0A        return self.wetness == 0%0A%0A    def show(self) -%3E None:%0A        print(self)%0A%0A    def __str__(self) -%3E str:%0A        return f%22%7Bself.color%7D %7Bself.size%7D %7Bself.wetness%7D%22%0A%0A%0A# Testes%0Atowel = Towel(%22Azul%22, %22P%22)%0Atowel.show()  # Azul P 0%0Atowel.dry(5)%0Atowel.show()  # Azul P 5%0Aprint(towel.isDry())  # False%0Atowel.dry(5)%0Atowel.show()  # Azul P 10%0Atowel.dry(5)  # msg: toalha encharcada%0Atowel.show()  # Azul P 10%0A%0Atowel.wringOut()%0Atowel.show()  # Azul P 0%0A%0Atowel = Towel(%22Verde%22, %22G%22)%0Aprint(towel.isDry())  # True%0Atowel.dry(30)%0Atowel.show()  # Verde G 30%0Aprint(towel.isDry())  # False%0Atowel.dry(1)  # msg: toalha encharcada%0A\n+%0A#refer%C3%AAncias%0Aprint(%22Qual a cor da sua toalha?%22)%0Acolor = input()%0Atowel: Towel = Towel(color, %22P%22) #objeto%0Aprint(f%22Sua toalha %C3%A9 %7Btowel.color%7D.%22)%0A%0A        \n",
            "lines": "14"
        },
        {
            "label": "2025-09-19_08-35-13",
            "content": "@@ -795,1735 +795,448 @@\n %22%0A%0A%0A\n-class Towel:%0A    def __init__(self, color: str, size: str):  # construtor%0A        self.color: str = color  # atributos%0A        s\n+# Testes%0Atowel = Towel(%22Azul%22, %22P%22)%0Atow\n el\n-f\n .s\n-ize: str = size%0A        self.wetness: int = 0%0A%0A    def dry(self, amount: int) -%3E None:%0A        self.wetness += amount%0A        if self.wetness %3E= self.isMaxWetness():%0A            self.wetness = self.isMaxWetness()%0A            \n+how()  # Azul P 0%0Atowel.dry(5)%0Atowel.show()  # Azul P 5%0A\n print(\n-%22\n to\n-alha encharcada%22)%0A%0A    def isDry(self):%0A        return self.wetness == 0%0A%0A    def wringOut(self):%0A        self.wetness = 0%0A%0A    def isMaxWetness(self) -%3E int:%0A        if self.size == %22P%22:  # early return%0A            return 10%0A        if self.size == %22M%22:%0A            return 20%0A        if self.size == %22G%22:%0A            return 30%0A        return 0  # default return%0A%0A    def __str__(self) -%3E str:  # toString%0A        return f%22Cor: %7Bself.color%7D, Tamanho: %7Bself.size%7D, Umidade: %7Bself.wetness%7D%22%0A%0A%0Adef main():%0A    towel: Towel = Towel(%22%22, %22%22)  # 2: criar um obj com qq valor inicial%0A    while True:  # 3: loop infinito%0A%0A        line: str = input()  # 4: perguntar ao usuario%0A        print(%22$%22 + line)  # echo%0A        args: list%5Bstr%5D = line.split(%22 %22)  # 5: separar argumentos%0A%0A        if args%5B0%5D == %22end%22:%0A            break%0A        elif args%5B0%5D == %22criar%22:  # color size%0A            color: str = args%5B1%5D%0A            size: str = args%5B2%5D%0A            towel = Towel(color, size)%0A        elif args%5B0%5D == %22seca%22:%0A            print(%22sim%22 if towel.isDry() else %22nao%22)%0A        elif args%5B0%5D == %22torcer%22:%0A            towel.wringOut\n+wel.isDry())  # False%0Atowel.dry(5)%0Atowel.show()  # Azul P 10%0Atowel.dry(5)  # msg: toalha encharcada%0Atowel.show()  # Azul P 10%0A%0Atowel.wringOut()%0Atowel.show()  # Azul P 0%0A%0Atowel = Towel(%22Verde%22, %22G%22)%0Aprint(towel.isDry())  # True%0Atowel.dry(30)%0Atowel.show\n ()\n-%0A\n   \n-      elif args%5B0%5D == %22enxugar%22:%0A            amount: int = int(args%5B1%5D)%0A            towel.dry(amount)%0A        elif args%5B0%5D == %22mostrar%22:%0A            print(towel)%0A        else:  # 7: erro%0A            print(%22fail: comando n%C3%A3o encontrado%22)%0A%0A%0Amain()\n+# Verde G 30%0Aprint(towel.isDry())  # False%0Atowel.dry(1)  # msg: toalha encharcada\n %0A\n",
            "lines": "53"
        },
        {
            "label": "2025-09-24_15-18-49",
            "content": "@@ -791,16 +791,874 @@\n ess%7D%22%0A%0A%0A\n+class Towel:%0A    def __init__(self, color: str, size: str):  # construtor%0A        self.color: str = color  # atributos%0A        self.size: str = size%0A        self.wetness: int = 0%0A%0A    def dry(self, amount: int) -%3E None:%0A        self.wetness += amount%0A        if self.wetness %3E= self.isMaxWetness():%0A            self.wetness = self.isMaxWetness()%0A            print(%22toalha encharcada%22)%0A%0A    def isDry(self):%0A        return self.wetness == 0%0A%0A    def wringOut(self):%0A        self.wetness = 0%0A%0A    def isMaxWetness(self) -%3E int:%0A        if self.size == %22P%22:  # early return%0A            return 10%0A        if self.size == %22M%22:%0A            return 20%0A        if self.size == %22G%22:%0A            return 30%0A        return 0  # default return%0A%0A    def __str__(self) -%3E str:  # toString%0A        return f%22Cor: %7Bself.color%7D, Tamanho: %7Bself.size%7D, Umidade: %7Bself.wetness%7D%22%0A%0A%0A\n def main\n",
            "lines": "92"
        },
        {
            "label": "2025-09-24_15-21-05",
            "content": "@@ -795,454 +795,8 @@\n %22%0A%0A%0A\n-# Testes%0Atowel = Towel(%22Azul%22, %22P%22)%0Atowel.show()  # Azul P 0%0Atowel.dry(5)%0Atowel.show()  # Azul P 5%0Aprint(towel.isDry())  # False%0Atowel.dry(5)%0Atowel.show()  # Azul P 10%0Atowel.dry(5)  # msg: toalha encharcada%0Atowel.show()  # Azul P 10%0A%0Atowel.wringOut()%0Atowel.show()  # Azul P 0%0A%0Atowel = Towel(%22Verde%22, %22G%22)%0Aprint(towel.isDry())  # True%0Atowel.dry(30)%0Atowel.show()  # Verde G 30%0Aprint(towel.isDry())  # False%0Atowel.dry(1)  # msg: toalha encharcada%0A%0A%0A\n def \n@@ -1651,12 +1651,21 @@\n ncontrado%22)%0A\n+%0A%0Amain()%0A\n",
            "lines": "61"
        },
        {
            "label": "2025-09-24_15-22-30",
            "content": "@@ -5,16 +5,26 @@\n s Towel:\n+  # classe\n %0A    def\n@@ -66,22 +66,8 @@\n tr):\n-  # construtor\n %0A   \n@@ -98,21 +98,8 @@\n olor\n-  # atributos\n %0A   \n@@ -252,25 +252,25 @@\n etness %3E\n-=\n  self.\n-is\n+get\n MaxWetne\n@@ -307,18 +307,19 @@\n  = self.\n-is\n+get\n MaxWetne\n@@ -326,102 +326,8 @@\n ss()\n-%0A            print(%22toalha encharcada%22)%0A%0A    def isDry(self):%0A        return self.wetness == 0\n %0A%0A  \n@@ -346,16 +346,24 @@\n ut(self)\n+ -%3E None\n :%0A      \n@@ -390,18 +390,19 @@\n     def \n-is\n+get\n MaxWetne\n@@ -450,24 +450,8 @@\n %22P%22:\n-  # early return\n %0A   \n@@ -591,26 +591,120 @@\n rn 0\n+%0A%0A \n   \n-#\n  def\n-ault return\n+ isDry(self) -%3E bool:%0A        return self.wetness == 0%0A%0A    def show(self) -%3E None:%0A        print(self)\n %0A%0A  \n@@ -734,20 +734,8 @@\n str:\n-  # toString\n %0A   \n@@ -752,13 +752,8 @@\n n f%22\n-Cor: \n %7Bsel\n@@ -764,18 +764,8 @@\n lor%7D\n-, Tamanho:\n  %7Bse\n@@ -776,34 +776,470 @@\n ize%7D\n-, Umidade: %7Bs\n+ %7Bself.wetness%7D%22%0A%0A%0A# Testes%0Atowel = Towel(%22Azul%22, %22P%22)%0Atowel.show()  # Azul P 0%0Atowel.dry(5)%0Atowel.show()  # Azul P 5%0Aprint(towel.isDry())  # False%0Atowel.dry(5)%0Atowel.show()  # Azul P 10%0Atowel.dry(5)  # msg: toalha encharcada%0Atowel.show()  # Azul P 10%0A%0Atow\n el\n-f\n .w\n-etness%7D%22\n+ringOut()%0Atowel.show()  # Azul P 0%0A%0Atowel = Towel(%22Verde%22, %22G%22)%0Aprint(towel.isDry())  # True%0Atowel.dry(30)%0Atowel.show()  # Verde G 30%0Aprint(towel.isDry())  # False%0Atowel.dry(1)  # msg: toalha encharcada\n %0A%0A%0Ad\n@@ -2105,24 +2105,4 @@\n o%22)%0A\n-%0A%0Amain()  # passo 1%0A\n",
            "lines": "80"
        },
        {
            "label": "2025-09-24_16-40-31",
            "content": "@@ -1721,42 +1721,22 @@\n )%0A%0A%0A\n-if __name__ == %22__main__%22:%0A    main()\n+main()  # passo 1\n %0A\n",
            "lines": "59"
        },
        {
            "label": "2025-09-24_16-41-05",
            "content": "@@ -728,95 +728,8 @@\n rn%0A%0A\n-    def show(self) -%3E None:%0A        print(f%22%7Bself.color%7D %7Bself.size%7D %7Bself.wetness%7D%22)%0A%0A\n     \n@@ -1605,20 +1605,23 @@\n %5B0%5D == %22\n-show\n+mostrar\n %22:%0A     \n@@ -1744,16 +1744,16 @@\n ain__%22:%0A\n+\n     main\n@@ -1759,449 +1759,4 @@\n n()%0A\n-%0A# Testes%0Atowel = Towel(%22Azul%22, %22P%22)%0Atowel.show()  # Azul P 0%0Atowel.dry(5)%0Atowel.show()  # Azul P 5%0Aprint(towel.isDry())  # False%0Atowel.dry(5)%0Atowel.show()  # Azul P 10%0Atowel.dry(5)  # msg: toalha encharcada%0Atowel.show()  # Azul P 10%0A%0Atowel.wringOut()%0Atowel.show()  # Azul P 0%0A%0Atowel = Towel(%22Verde%22, %22G%22)%0Aprint(towel.isDry())  # True%0Atowel.dry(30)%0Atowel.show()  # Verde G 30%0Aprint(towel.isDry())  # False%0Atowel.dry(1)  # msg: toalha encharcada%0A\n",
            "lines": "60"
        },
        {
            "label": "2025-09-24_16-43-27",
            "content": "@@ -1840,16 +1840,25 @@\n main()%0A%0A\n+# Testes%0A\n towel = \n",
            "lines": "84"
        },
        {
            "label": "2025-10-01_19-51-05",
            "content": "@@ -1839,8 +1839,444 @@\n  main()%0A\n+%0Atowel = Towel(%22Azul%22, %22P%22)%0Atowel.show()  # Azul P 0%0Atowel.dry(5)%0Atowel.show()  # Azul P 5%0Aprint(towel.isDry())  # False%0Atowel.dry(5)%0Atowel.show()  # Azul P 10%0Atowel.dry(5)  # msg: toalha encharcada%0Atowel.show()  # Azul P 10%0A%0Atowel.wringOut()%0Atowel.show()  # Azul P 0%0A%0Atowel = Towel(%22Verde%22, %22G%22)%0Aprint(towel.isDry())  # True%0Atowel.dry(30)%0Atowel.show()  # Verde G 30%0Aprint(towel.isDry())  # False%0Atowel.dry(1)  # msg: toalha encharcada%0A\n",
            "lines": "83"
        },
        {
            "label": "2025-10-01_19-51-39",
            "content": "class Towel:\n    def __init__(self, color: str, size: str):  # construtor\n        self.color: str = color  # atributos\n        self.size: str = size\n        self.wetness: int = 0\n\n    def dry(self, amount: int) -> None:\n        self.wetness += amount\n        if self.wetness >= self.isMaxWetness():\n            self.wetness = self.isMaxWetness()\n            print(\"toalha encharcada\")\n\n    def isDry(self):\n        return self.wetness == 0\n\n    def wringOut(self):\n        self.wetness = 0\n\n    def isMaxWetness(self) -> int:\n        if self.size == \"P\":  # early return\n            return 10\n        if self.size == \"M\":\n            return 20\n        if self.size == \"G\":\n            return 30\n        return 0  # default return\n\n    def show(self) -> None:\n        print(f\"{self.color} {self.size} {self.wetness}\")\n\n    def __str__(self) -> str:  # toString\n        return f\"Cor: {self.color}, Tamanho: {self.size}, Umidade: {self.wetness}\"\n\n\ndef main():\n    towel: Towel = Towel(\"\", \"\")  # 2: criar um obj com qq valor inicial\n    while True:  # 3: loop infinito\n\n        line: str = input()  # 4: perguntar ao usuario\n        print(\"$\" + line)  # echo\n        args: list[str] = line.split(\" \")  # 5: separar argumentos\n\n        if args[0] == \"end\":\n            break\n        elif args[0] == \"criar\":  # color size\n            color: str = args[1]\n            size: str = args[2]\n            towel = Towel(color, size)\n        elif args[0] == \"seca\":\n            print(\"sim\" if towel.isDry() else \"nao\")\n        elif args[0] == \"torcer\":\n            towel.wringOut()\n        elif args[0] == \"enxugar\":\n            amount: int = int(args[1])\n            towel.dry(amount)\n        elif args[0] == \"show\":\n            print(towel)\n        else:  # 7: erro\n            print(\"fail: comando n\u00e3o encontrado\")\n\n\nif __name__ == \"__main__\":\n    main()\n",
            "lines": "63"
        }
    ]
}